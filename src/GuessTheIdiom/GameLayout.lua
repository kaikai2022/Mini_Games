---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lucus.
--- DateTime: 15/7/2022 10:42 AM
---

local Sound = require("GuessTheIdiom.Sound")
local IdiomConfig = require("GuessTheIdiom.IdiomConfig")
local Characters = require("GuessTheIdiom.3000Characters")

---@class InputButton 等待输入的Button
local InputButton = class("InputButton", function()
    return ccui.Layout:create()
end)

InputButton.lineMaxItemCount = 8
InputButton.lineMaxItemPadding = 10
function InputButton:ctor()
    self:setScale(display.width / CC_DESIGN_RESOLUTION.width)
    --self:setBackGroundColor(display.COLOR_RED)
    --self:setBackGroundColorType(ccui.LayoutBackGroundColorType.solid) --设置颜色
    self.button = ccui.Button:create("GuessTheIdiom/images/Gaming/btn_bg.png")
                      :setAnchorPoint(cc.p(0.5, 0.5))
                      :addTo(self)
    local buttonSize = self.button:getContentSize()
    self.width = buttonSize.width * display.width / CC_DESIGN_RESOLUTION.width + InputButton.lineMaxItemPadding
    self.height = buttonSize.height * display.width / CC_DESIGN_RESOLUTION.width + InputButton.lineMaxItemPadding
    self:setContentSize(self.width, self.height)
    self.button:move(self.width / 2, self.height / 2)
    self.text = cc.Label:createWithTTF(
            "空",
            "GuessTheIdiom/Fnt/STYuanti-SC-Bold.ttf",
            50
    --cc.size(150, 0),
    --cc.TEXT_ALIGNMENT_LEFT,
    --cc.VERTICAL_TEXT_ALIGNMENT_TOP
    )
                  :setAnchorPoint(cc.p(0.5, 0.5))
                  :addTo(self.button)
                  :move(buttonSize.width / 2, buttonSize.height / 2 + 8)
                  :setTextColor(display.COLOR_BLACK)

    self.button:addClickEventListener(function(sender)
        Sound.onClicked()
        if self.callback then
            self.callback(self.text:getString())
        end
    end)
end

---@public setString 设置文字
---@param value string 设置的文字
function InputButton:setString(value)
    self.text:setString(value)
end

---@public InputButton:setCallback 设置按钮点击回调
---@param callback function 回调方法
function InputButton:setCallback(callback)
    self.callback = callback
end

---class WrongNode 失败界面
local WrongNode = class(WrongNode, function()
    return cc.Node:create()
end)

function WrongNode:ctor()
    display.newSprite("GuessTheIdiom/images/Gaming/wrong_title.png")
           :setAnchorPoint(cc.p(0.5, 0))
           :setScale(display.width / CC_DESIGN_RESOLUTION.width)
           :addTo(self)
           :move(0, -10 * display.width / CC_DESIGN_RESOLUTION.width)

    local wrong_bg = display.newSprite("GuessTheIdiom/images/Gaming/correct_input_bg.png")
                            :setAnchorPoint(cc.p(0.5, 1))
                            :addTo(self):move(0, -15)
    local wrong_bg_size = wrong_bg:getContentSize()
    self.text = cc.Label:createWithTTF(
            "随地势窜",
            "GuessTheIdiom/Fnt/STYuanti-SC-Bold.ttf",
            40
    )
                  :setAnchorPoint(cc.p(0.5, 0.5))
                  :addTo(wrong_bg)
                  :move(wrong_bg_size.width / 2, wrong_bg_size.height / 2)
                  :setTextColor(display.COLOR_BLACK)
    self:hide()
end

function WrongNode:showNode(value)
    self.text:setString(value)
    self:show()
end

local GameLayout = class("GameLayout", function()
    return ccui.Layout:create()
end)
GameLayout.lineMaxInputCount = 4
function GameLayout:ctor(parent)
    ---@private waiting_input_texts 等待输入的所有字
    self.waiting_input_texts = {}
    self.nowInputIndex = 0
    self.inputButtons = {}
    self:setContentSize(display.width, display.height)
    self:setAnchorPoint(0.5, 0.5)
    --self:setBackGroundColor(display.COLOR_BLACK)
    --    :setBackGroundColorType(ccui.LayoutBackGroundColorType.solid) --设置颜色
    if (parent) then
        self:addTo(parent)
    end
    self:move(display.cx, display.cy)

    display.newSprite("GuessTheIdiom/images/Gaming/title.png")
           :setAnchorPoint(cc.p(0.25, 1))
           :addTo(self)
           :move(display.cx, display.height - 30)

    local idiomBg = display.newSprite("GuessTheIdiom/images/Gaming/show_idiom_image_bg.png")
                           :setAnchorPoint(cc.p(0, 0.5))
                           :addTo(self)
                           :move(30 * display.width / CC_DESIGN_RESOLUTION.width, display.cy)
                           :setScale(display.width / CC_DESIGN_RESOLUTION.width)

    local idiomBgSize = idiomBg:getContentSize()
    self.idiomSprite = ccui.ImageView:create("GuessTheIdiom/images/IdiomImages/1.png")
                           :ignoreContentAdaptWithSize(false)
                           :setContentSize(idiomBgSize.width, idiomBgSize.height)
                           :setAnchorPoint(cc.p(0.5, 0.5))
                           :addTo(idiomBg)
                           :move(idiomBgSize.width / 2, idiomBgSize.height / 2)
    local waiting_inputsNode = cc.Node:create()
                                 :addTo(self)
                                 :setScale(display.width / CC_DESIGN_RESOLUTION.width)
                                 :setAnchorPoint(1, 0.5)
    local waiting_bg = display.newSprite("GuessTheIdiom/images/Gaming/waiting_all_input_bg.png")
                              :setAnchorPoint(cc.p(0.5, 0.5))
                              :addTo(waiting_inputsNode)
                              :move(0, 0)
    local waiting_bg_size = waiting_bg:getContentSize()
    waiting_inputsNode:move(display.width - (600 * (display.width / CC_DESIGN_RESOLUTION.width)), display.height - 300 * display.height / CC_DESIGN_RESOLUTION.height)

    local inputBg = ccui.Layout:create()
    --:setBackGroundColor(display.COLOR_BLACK)
    --:setBackGroundColorType(ccui.LayoutBackGroundColorType.solid) --设置颜色
                        :setContentSize(waiting_bg_size.width - 90, waiting_bg_size.height)
                        :setAnchorPoint(cc.p(0.5, 0.5))
                        :addTo(waiting_inputsNode)
                        :move(0, 0)
    local inputBgSize = inputBg:getContentSize()
    for i = 1, GameLayout.lineMaxInputCount do
        local inputNode = ccui.Layout:create()
                              :setContentSize(inputBgSize.width / GameLayout.lineMaxInputCount, inputBgSize.height)
                              :addTo(inputBg)
        local inputNodeSize = inputNode:getContentSize()
        local input_item_bg = display.newSprite("GuessTheIdiom/images/Gaming/waitinng_input_bg.png")
                                     :setAnchorPoint(cc.p(0.5, 0.5))
                                     :addTo(inputNode)
                                     :move(inputNodeSize.width / 2, inputNodeSize.height / 2 - 20)
        local input_item_bg_size = input_item_bg:getContentSize()
        self.waiting_input_texts[i] = cc.Label:createWithTTF(
                "",
                "GuessTheIdiom/Fnt/STYuanti-SC-Bold.ttf",
                80
        --cc.size(150, 0),
        --cc.TEXT_ALIGNMENT_LEFT,
        --cc.VERTICAL_TEXT_ALIGNMENT_TOP
        )
                                        :setAnchorPoint(cc.p(0.5, 0.5))
                                        :addTo(input_item_bg)
                                        :move(input_item_bg_size.width / 2, input_item_bg_size.height / 2 + 13)
                                        :setTextColor(display.COLOR_BLACK)
    end
    inputBg:setLayoutType(ccui.LayoutType.HORIZONTAL)

    self.btn_remove = ccui.Button:create("GuessTheIdiom/images/Gaming/btn_remove_input.png")
                          :setAnchorPoint(cc.p(0, 0.5))
                          :addTo(waiting_inputsNode)
                          :move(waiting_bg_size.width / 2 + 30, 0)
    self.btn_remove:addClickEventListener(function()
        Sound.onClicked()
        if self.nowInputIndex >= 1 then
            self.waiting_input_texts[self.nowInputIndex]:setString("")
            self.nowInputIndex = self.nowInputIndex - 1
        end
    end)

    ---@private btn_next_level 下一题
    self.btn_next_level = ccui.Button:create("GuessTheIdiom/images/Gaming/btn_next_level.png")
                              :setAnchorPoint(cc.p(1, 0.5))
                              :addTo(self)
                              :move(display.width - 60, 100)
                              :setScale(display.width / CC_DESIGN_RESOLUTION.width)
    self.btn_next_level:addClickEventListener(function(sender)
        Sound.onClicked()
        self:initGame(self.level + 1)
    end)

    ---@private overStateSprite 答题结束时是否正确的图片
    self.overStateSprite = display.newSprite("GuessTheIdiom/images/Gaming/state_correct.png")
                                  :setAnchorPoint(cc.p(0, 0.5))
                                  :addTo(waiting_inputsNode)
                                  :move(waiting_bg_size.width / 2 + 30, 0)

    local button = InputButton:create()
    local showAllPanel = ccui.Layout:create()
                             :setAnchorPoint(cc.p(1, 0.5))
                             :setContentSize(button.width * InputButton.lineMaxItemCount, button.height * 2)
                             :addTo(self)
                             :move(display.width - 100 * display.width / CC_DESIGN_RESOLUTION.width, 200 * display.height / CC_DESIGN_RESOLUTION.height)
    ---@private inputBtnNode 所有的字的主node
    self.inputBtnNode = showAllPanel
    --local colors = { display.COLOR_RED, display.COLOR_BLUE }
    for line = 1, 2 do
        local temp_layout = ccui.Layout:create()
                                :setAnchorPoint(cc.p(0, 0))
                                :setContentSize(button.width * InputButton.lineMaxItemCount, button.height)
                                :addTo(showAllPanel)
        --:setBackGroundColor(colors[line])
        --:setBackGroundColorType(ccui.LayoutBackGroundColorType.solid) --设置颜色
        for index = 1, 8 do
            local temp_btn = InputButton:create()
                                        :setAnchorPoint(cc.p(0.5, 0.5))
                                        :addTo(temp_layout)
            temp_btn:setString("哈")
            temp_btn:setCallback(function(value)
                if self.nowInputIndex < GameLayout.lineMaxInputCount then
                    self.nowInputIndex = self.nowInputIndex + 1
                    self.waiting_input_texts[self.nowInputIndex]:setString(value)

                end
                self:_updateState()

            end)
            table.insert(self.inputButtons, temp_btn)
        end
        temp_layout:setLayoutType(ccui.LayoutType.HORIZONTAL)
    end
    showAllPanel:setLayoutType(ccui.LayoutType.VERTICAL)

    ---@private nodeWrongNode 失败的界面
    self.nodeWrongNode = WrongNode:create()
                                  :addTo(self)
                                  :move(display.cx + 100, display.cy - 100)

    local backButton = ccui.Button:create("GuessTheIdiom/images/btn_back.png")
                           :setAnchorPoint(0, 0.5)
                           :addTo(self)
                           :move(80, display.height - 80)
    backButton:addClickEventListener(function(sender)
        Sound.onClicked()
        if (self.backCallback) then
            self.backCallback()
        end
    end)
end

function GameLayout:setBackCallback(callback)
    self.backCallback = callback
end

---@public init 初始化
---@param level number 等级
function GameLayout:initGame(level)
    self.level = level or 1;
    ---@private idiom 当时的成语谜底
    self.idiom = IdiomConfig[self.level]
    self.idiomSprite:loadTexture(string.format("GuessTheIdiom/images/IdiomImages/%s.png", self.level))
    self.nowInputIndex = 0
    for _, text in pairs(self.waiting_input_texts) do
        text:setString("")
    end
    local tempCharacters = clone(Characters)
    local allButtonStr = {}
    --dump(Characters)
    local index_count = 1
    for index = 1, string.len(self.idiom) / 3 do
        local str = string.sub(self.idiom, index_count, index_count + 2)
        index_count = index_count + 3
        print(str)
        table.insert(allButtonStr, str)
    end

    local function getStr()
        return tempCharacters[math.random(1, #tempCharacters)]
    end
    for index = #allButtonStr, #self.inputButtons - 1 do
        local isOk = true
        while isOk do
            local str = getStr()
            local remove_index = table.removebyvalue(allButtonStr, str)
            if remove_index == 0 then
                isOk = false
            end
            table.insert(allButtonStr, str)
        end
    end
    dump(allButtonStr)
    --table.sort(allButtonStr, function(value1, value2)
    --    --math.randomseed(os.runtime())
    --    local random = math.random(-100, 100)
    --    print(value1,value2)
    --    return random > 0
    --end)
    math.randomseed(tostring(os.time()):reverse():sub(1, 6))
    local random = math.random(#allButtonStr, 50)
    for _ = 1, random do
        local index = math.random(#allButtonStr)
        local temp = allButtonStr[1]
        allButtonStr[1] = allButtonStr[index]
        allButtonStr[index] = temp
    end
    dump(allButtonStr)

    for index, value in ipairs(self.inputButtons) do
        value:setString(allButtonStr[index])
    end
    self.nodeWrongNode:hide()
    self.inputBtnNode:show()
    self:_updateState()
    self:show()
end

---@private _updateState 刷新状态
function GameLayout:_updateState()
    if (self.nowInputIndex == GameLayout.lineMaxInputCount) then
        self:_changeGameOver()
        self.overStateSprite:show()
        self.btn_remove:hide()
    else
        self.overStateSprite:hide()
        self.btn_remove:show()
        self.btn_next_level:hide()
    end
end

---@private _changeGameOver 判断游戏结果
function GameLayout:_changeGameOver()
    local inputStr = ''
    for index, value in ipairs(self.waiting_input_texts) do
        inputStr = inputStr .. value:getString()
    end
    print(inputStr)
    if inputStr == self.idiom then
        self.overStateSprite:setTexture("GuessTheIdiom/images/Gaming/state_correct.png")
        Sound.playCorrect()
    else
        self.overStateSprite:setTexture("GuessTheIdiom/images/Gaming/state_wrong.png")
        self.nodeWrongNode:showNode(self.idiom)
        self.inputBtnNode:hide()
        Sound.playWrong()
    end
    self.btn_next_level:setEnabled(self.level < #IdiomConfig)
    self.btn_next_level:show()
    cc.UserDefault:getInstance():setIntegerForKey(require("GuessTheIdiom.UserDefaultKey"), self.level)
end

return GameLayout