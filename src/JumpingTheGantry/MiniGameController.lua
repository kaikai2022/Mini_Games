---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lucus.
--- DateTime: 4/7/2022 11:50 AM
---
local Tools = require("JumpingTheGantry.Tools")
local MiniGameController = class("MiniGameController")
local Define = require("JumpingTheGantry.Define")
local Sound = require("JumpingTheGantry.Sound")
local SoundBtn = require("JumpingTheGantry.SoundButtonNode")

local StartLayer
local RestartLayer

local MINIGAMECONTROLLER_Z_UI_ORDER = 10

local AllCards = {
    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, --方
    0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, --梅
    0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, --红
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, --黑
}

local cardColors = {
    [0x10] = function()
        return "1"
    end,
    [0x20] = function()
        return "2"
    end,
    [0x30] = function()
        return "3"
    end,
    [0x40] = function()
        return "4"
    end,
}
local cardValues = {
    [0x01] = "A",
    [0x02] = "2",
    [0x03] = "3",
    [0x04] = "4",
    [0x05] = "5",
    [0x06] = "6",
    [0x07] = "7",
    [0x08] = "8",
    [0x09] = "9",
    [0x0A] = "10",
    [0x0B] = "J",
    [0x0C] = "Q",
    [0x0D] = "K",
}
local function setCardValue(node, value)
    local path
    if (not value) then
        path = 'JumpingTheGantry/pokers/poker_00.png'
    else
        local color = cardColors[Tools.And(value, 0xf0)]
        if (color) then
            color = color()
        end
        path = string.format("JumpingTheGantry/pokers/%s/%s.png", color, cardValues[Tools.And(value, 0x0f)])
    end
    node:loadTexture(path)
end

---@alias onSheMen 射门
function MiniGameController:onSheMen()
    self.btn_sheMen:hide()
    local scaleAni = cc.ScaleTo:create(0.5, 1, 1)
    self.num = self.num + 1
    self.text_num:setString(string.format("D%sL", self.num))
    setCardValue(self.centerCard)
    self.centerCard:setScale(0)
    self.centerCard:runAction(cc.Sequence:create(scaleAni, cc.DelayTime:create(0.2), cc.CallFunc:create(function()
        self.centerCard:runAction(
                cc.Sequence:create(
                        cc.ScaleTo:create(0.5, 0, 1),
                        cc.CallFunc:create(function()
                            local random = math.random(1, #(self.cards))
                            self.centerCardNumber = self.cards[random]
                            table.remove(self.cards, random)
                            setCardValue(self.centerCard, self.centerCardNumber)
                            --self.centerCard:setTexture("")
                        end),
                        cc.ScaleTo:create(0.5, 1, 1),
                        cc.CallFunc:create(function()
                            self:overScoreAction()
                        end)
                )
        )
    end)))
end
---@alias overScore 结束显示动画
function MiniGameController:overScoreAction()
    local leftValue, centerValue, rightValue = Tools.And(self.leftCardNumber, 0x0f), Tools.And(self.centerCardNumber, 0x0f), Tools.And(self.rightCardNumber, 0x0f)
    if not self.scoreAnimation_text then
        local scoreAnimation_text = ccui.TextBMFont:create()
        --:pos()
                                        :setAnchorPoint(0.5, 0.5)
                                        :addTo(self.uiNode)
                                        :setPosition(cc.p(display.realCx, display.realCy + 200))
        scoreAnimation_text:setFntFile("JumpingTheGantry/Gameing/over_core.fnt")
        scoreAnimation_text:setString(string.format("+%s", 0))
        scoreAnimation_text:hide()
        self.scoreAnimation_text = scoreAnimation_text
    end
    local score = 0
    if (leftValue > rightValue) then
        local temp = leftValue
        leftValue = rightValue
        rightValue = temp
    end
    if (leftValue < centerValue and centerValue < rightValue) then
        print("胜利")
        score = 1
        self.btn_sheMen:show()
    elseif leftValue == centerValue or centerValue == rightValue then
        print("撞柱")
        if (leftValue == rightValue) then
            score = -4
        else
            score = -2
        end
        self:resetAllCards()
        self.btn_ZZL:show()
    else
        score = -1
        self:resetAllCards()
        print("射歪啦")
        self.btn_SWL:show()
    end
    self.scoreAnimation_text:setString(score < 0 and score or string.format("+%s", score))
    self.scoreAnimation_text:show()
    self.scoreAnimation_text:runAction(cc.Sequence:create(
            cc.Spawn:create(
                    cc.MoveBy:create(0.5, cc.p(0, 200)),
                    cc.FadeTo:create(0.5, 0)
            ),
            cc.CallFunc:create(function()
                self.score = self.score + score
                self.scoreAnimation_text:hide()
                    :setPosition(cc.p(display.realCx, display.realCy + 200))
                self.scoreAnimation_text:setOpacity(255)
                self.score_text:setString(self.score)
            end)
    ))
    --self.btn_sheMen:show()
end

function MiniGameController:ctor(mainNode, startLayer, restartLayer)
    StartLayer = startLayer
    RestartLayer = restartLayer
    self.mainNode = mainNode
end

function MiniGameController:start()
    self:initScene()
    Sound.playBgMusic(true)
end

function MiniGameController:initScene()
    self.uiNode = cc.Node:create()
    self.uiNode:addTo(self.mainNode)
    self.uiNode:setLocalZOrder(MINIGAMECONTROLLER_Z_UI_ORDER)
    self:initBackground()
    self:initGameLayer()
    --self:initPauseBtn()
    self:initStartLayer()
    self:initRestartLayer()
    --self.gameNode = cc.Node:create()
    --self.gameNode:addTo(self.mainNode)
    --self.gameNode:setLocalZOrder(MNIGAMECONTROLLER_Z_ORDER)
    --self:sendMsg(MiniGameController.MSG_SCENE_INIT_FINISH)
    --Sound.playBgMusic()

end

function MiniGameController:initGameLayer()
    local gameLayer = cc.Node:create()
                        :addTo(self.mainNode)
                        :move(display.realCx, display.realCy)
    local bg = display.newSprite("JumpingTheGantry/Gameing/gameing_desk.png")
                      :addTo(gameLayer)
    local bg_content_size = bg:getContentSize()
    --gameLayer:setAnchorPoint(cc.p(0.5, 0))
    --gameLayer:setPosition(display.center)
    self.gameLayer = gameLayer

    local node = cc.Node:create()
                   :addTo(gameLayer)
                   :setAnchorPoint(cc.p(0.5, 0.5)):setScale(0.6)
                   :move(-210, -100)
    self.leftCard = ccui.ImageView:create("JumpingTheGantry/pokers/poker_00.png")
                        :setAnchorPoint(cc.p(0.5, 0.5))
                        :addTo(node)
    setCardValue(self.leftCard)
    node = cc.Node:create()
             :addTo(gameLayer)
             :setAnchorPoint(cc.p(0.5, 0.5)):setScale(0.6)
             :move(210, -100)
    self.rightCard = ccui.ImageView:create("JumpingTheGantry/pokers/poker_00.png")
                         :setAnchorPoint(cc.p(0.5, 0.5))
                         :addTo(node)
    setCardValue(self.rightCard)
    node = cc.Node:create()
             :addTo(gameLayer)
             :move(0, -60)
    self.centerCard = ccui.ImageView:create("JumpingTheGantry/pokers/poker_00.png")
                          :ignoreContentAdaptWithSize(false)
                          :setContentSize(cc.p(181, 246))
                          :setAnchorPoint(cc.p(0.5, 0.5))
                          :addTo(node)
    setCardValue(self.centerCard)
    self.gameLayer:hide()

    local shemen = ccui.Button:create("JumpingTheGantry/Gameing/btn_shemen.png")
    shemen:setAnchorPoint(cc.p(0.5, 0.5))
    shemen:addTo(gameLayer)
    shemen:setPosition(cc.p(0, -500))
    shemen:addClickEventListener(function(sender)
        self:onSheMen()
        Sound.onClicked()
    end)
    shemen:hide()
    self.btn_sheMen = shemen

    local nowGameCount = ccui.TextBMFont:create()
    --:pos()
                             :setAnchorPoint(0.5, 0.5)
                             :addTo(gameLayer)
                             :setPosition(cc.p(0, -300))
    nowGameCount:setFntFile("JumpingTheGantry/Gameing/game_num.fnt")
    nowGameCount:setString(string.format("D%sL", 0))
    nowGameCount:hide()
    self.text_num = nowGameCount

    ---射歪了
    local sheWaile_btn = ccui.Button:create("JumpingTheGantry/Gameing/btn_shewaila.png")
    sheWaile_btn:setAnchorPoint(cc.p(0.5, 0.5))
    sheWaile_btn:addTo(gameLayer)
    sheWaile_btn:setPosition(cc.p(0, -500))
    sheWaile_btn:addClickEventListener(function(sender)
        self:startGame()
        Sound.onClicked()
    end)
    sheWaile_btn:hide()
    self.btn_SWL = sheWaile_btn

    local btn_zhuangzhula = ccui.Button:create("JumpingTheGantry/Gameing/btn_zhuangzhula.png")
    btn_zhuangzhula:setAnchorPoint(cc.p(0.5, 0.5))
    btn_zhuangzhula:addTo(gameLayer)
    btn_zhuangzhula:setPosition(cc.p(0, -500))
    btn_zhuangzhula:addClickEventListener(function(sender)
        self:startGame()
        Sound.onClicked()
    end)
    btn_zhuangzhula:hide()
    self.btn_ZZL = btn_zhuangzhula

    local score_bg = display.newSprite("JumpingTheGantry/Gameing/now_score_bg.png")
                            :setAnchorPoint(cc.p(0.5, 0.5))
    local score_bg_contentSize = score_bg:getContentSize()
    local scoreNode = cc.Node:create()
                        :addTo(gameLayer)
                        :move(-score_bg_contentSize.width / 2 + 40, display.realCy - score_bg_contentSize.height / 2 - 150)
    score_bg:addTo(scoreNode)
    local icon = display.newSprite("JumpingTheGantry/score_icon.png")
                        :setAnchorPoint(cc.p(0, 0.5))
                        :addTo(score_bg)
    icon:move(icon:getContentSize().width / 2, score_bg_contentSize.height / 2)
    local scoreNode = cc.LayerColor:create(cc.c4b(0, 0, 0, 0), score_bg_contentSize.width - icon:getContentSize().width - icon:getContentSize().width,
            score_bg_contentSize.height)
    --:setContentSize(score_bg_contentSize.width - icon:getContentSize().width)
                        :setAnchorPoint(0.5, 0.5)
                        :addTo(score_bg)
                        :move(icon:getContentSize().width + icon:getContentSize().width / 2, 0)
    local score_text = ccui.TextBMFont:create()
    --:pos()
                           :setAnchorPoint(0.5, 0.5)
                           :addTo(scoreNode)
                           :move(scoreNode:getContentSize().width / 2, scoreNode:getContentSize().height / 2)
    score_text:setFntFile("JumpingTheGantry/Gameing/now_score.fnt")
    self.score_text = score_text

    local buwanle = ccui.Button:create("JumpingTheGantry/Gameing/btn_not_play.png")
    buwanle:setAnchorPoint(cc.p(1, 0.5))
    buwanle:addTo(gameLayer)
           :move(display.realCx - 10, display.realCy - score_bg_contentSize.height / 2 - 150)

    buwanle:addClickEventListener(function(sender)
        self.restartLayer:showLayout(self.score)
        self.gameLayer:hide()
        Sound.onClicked()
    end)
    self.btn_not_player = buwanle

    SoundBtn.new(self.gameLayer)
            :setPosition(cc.p(300, -400))
end

function MiniGameController:startPlay()
    self.startLayer:hide()
    self.gameLayer:show()
    self.restartLayer:hide()
    --self.restartLayer:hide()
    --self.resumeBtnLayer:setVisible(false)
    --self.gameNode:removeAllChildren()
    --self.gameNode:stopAllActions()
    self:initScore()
    self:startGame()
    --Sound.playBgMusic(true)
end

function MiniGameController:startGame()
    self.btn_ZZL:hide()
    self.btn_SWL:hide()
    setCardValue(self.centerCard)
    local random = math.random(1, #(self.cards))
    self.leftCardNumber = self.cards[random]
    table.remove(self.cards, random)
    random = math.random(1, #(self.cards))
    self.rightCardNumber = self.cards[random]
    table.remove(self.cards, random)
    self.leftCard:setScale(0)
    setCardValue(self.leftCard, self.leftCardNumber)
    local sizeScale = 1.6
    local scaleAni = cc.ScaleTo:create(0.5, sizeScale, sizeScale)
    --local callAni = cc.CallFunc:create(function()
    --    
    --end)
    --self.leftCard:runAction(cc.Sequence:create(scaleAni))
    self.leftCard:runAction(scaleAni)

    self.rightCard:setScale(0)
    setCardValue(self.rightCard, self.rightCardNumber)
    scaleAni = cc.ScaleTo:create(0.5, sizeScale, sizeScale)
    self.rightCard:runAction(cc.Sequence:create(scaleAni, cc.DelayTime:create(0.2), cc.CallFunc:create(function()
        self.btn_sheMen:show()
        self.text_num:show()
    end)))
    self.centerCard:setScale(0)


end

---@alias resetAllCards 从新洗牌
function MiniGameController:resetAllCards()
    self.cards = clone(AllCards)
end

function MiniGameController:initScore()
    self.score = 0
    self:resetAllCards()
    self.num = 0

    self.score_text:setString(self.score)

end

function MiniGameController:initStartLayer()
    self.startLayer = StartLayer.new(self.uiNode, handler(self, MiniGameController.startPlay))
end

function MiniGameController:initRestartLayer()
    self.restartLayer = RestartLayer.new(self.uiNode, handler(self, MiniGameController.startPlay), handler(self, MiniGameController.onHome))
    self.restartLayer:hide()
end

function MiniGameController:initBackground()
    local bg = display.newSprite("JumpingTheGantry/bg.png")
    bg:addTo(self.mainNode)
    bg:move(display.realCx, display.realCy)
    bg:setLocalZOrder(Define.Z_ORDER_BG)
end

function MiniGameController:onHome()
    self.restartLayer:hide()
    self.startLayer:show()
    self.gameLayer:hide()
end

return MiniGameController