---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lucus.
--- DateTime: 4/8/2022 4:38 PM
---

local CandyNode = class("CandyNode", cc.Node)

local MATERIAL_DEFAULT = cc.PhysicsMaterial(1, 0.1, 0.5)                      -- 密度、碰撞系数、摩擦力
function CandyNode.setParent(parent)
    CandyNode.parent = parent
end

function CandyNode:ctor(id)
    self:init(id)
    if (CandyNode.parent) then
        self:addTo(CandyNode.parent)
            :move(math.random(90, display.realWidth - 90), display.realHeight - 75)
    end
    self:addClickEventListener(function()
        dump(self.contactNodes)
    end)
    
    --self:onUpdate(function()
    --print("opopopopopo")
    --end)

    --self:scheduleUpdateWithPriorityLua(function()
    --    if self.physicsBody and self.physicsBody:isResting() then
    --        self.physicsBody:setContactTestBitmask(0x01)
    --    end
    --end, 10)
end

function CandyNode:init(id)
    local children = self:getChildren()
    for k, v in pairs(children) do
        self:removeChild(v)
    end
    self.id = id or math.random(1, 3)
    self.imagePath = string.format("SoftFudgeCandy/images/game/Candys/%s.png", self.id)
    self.sprite = ccui.Button:create(self.imagePath, self.imagePath, self.imagePath)
                      :addTo(self)
    self.size = self.sprite:getContentSize()
    if not self.physicsBody then
        local body = cc.PhysicsBody:createCircle(self.size.width * 0.5, MATERIAL_DEFAULT)  -- 刚体大小，材质类型
        self.physicsBody = body
        self:setPhysicsBody(body)
        local contactListener = cc.EventListenerPhysicsContact:create()
        contactListener:registerScriptHandler(handler(self, self.onContactBegin), cc.Handler.EVENT_PHYSICS_CONTACT_BEGIN)
        contactListener:registerScriptHandler(handler(self, self.onContactSeparate), cc.Handler.EVENT_PHYSICS_CONTACT_SEPARATE)
        local eventDispatcher = cc.Director:getInstance():getEventDispatcher()
        eventDispatcher:addEventListenerWithFixedPriority(contactListener, 1)
    else
        self.physicsBody:removeAllShapes()
        self.physicsBody:addShape(cc.PhysicsShapeCircle:create(self.size.width * 0.5, MATERIAL_DEFAULT))
        print(self.physicsBody:getCategoryBitmask())
    end

    self.physicsBody:setCategoryBitmask(0x01)
    self.physicsBody:setContactTestBitmask(0x01)
    self.physicsBody:setCollisionBitmask(0x01)
    if self.callback then
        self.sprite:addClickEventListener(self.callback)
    end


end

function CandyNode:addClickEventListener(callback)
    self.sprite:addClickEventListener(callback)
    self.callback = callback
end

function CandyNode:onContactBegin(contact)
    local nodeA = contact:getShapeA():getBody():getNode()
    local nodeB = contact:getShapeB():getBody():getNode()
    if nodeA ~= self and nodeB ~= self then
        return true
    end
    ---自己和其他发生了碰撞
    --- nodeB 设置成自己
    if nodeB ~= self then
        local temp = nodeA
        nodeA = nodeB
        nodeB = temp
    end

    if (nodeA.id == self.id) then
        self:mergeCheck(nodeA)
    end
    return true
end

function CandyNode:onContactSeparate(contact)
    local nodeA = contact:getShapeA():getBody():getNode()
    local nodeB = contact:getShapeB():getBody():getNode()
    if nodeA ~= self and nodeB ~= self then
        return true
    end
    ---自己和其他发生了碰撞
    --- nodeB 设置成自己
    if nodeB ~= self then
        local temp = nodeA
        nodeA = nodeB
        nodeB = temp
    end

    if (nodeA.id == self.id) then
        self:mergeCheckOut(nodeA)
    end
    return true
end

function CandyNode:mergeCheckOut(nodeA)
    if (not nodeA.id or nodeA.id ~= self.id) then
        print("2个不是同样的球")
        return
    end

    if nodeA == self then
        print("2个球就是自己")
        return
    end

    for pos, node in pairs(self.contactNodes) do
        if node == nodeA then
            table.remove(self.contactNodes, pos)
            return
        end
    end
    print("不应该这里 1")
end

---@public mergeCheck 检查是否可以融合
function CandyNode:mergeCheck(nodeA)
    if (not nodeA.id or nodeA.id ~= self.id) then
        print("2个不是同样的球")
        return
    end

    if nodeA == self then
        print("2个球就是自己")
        return
    end

    if not self.contactNodes then
        self.contactNodes = {}
        table.insert(self.contactNodes, self)
    end

    for k, node in pairs(self.contactNodes) do
        if node == nodeA then
            return
        end
    end
    table.insert(self.contactNodes, nodeA)

    --local nodePos = nodeA:getPositionY()
    --local selfPos = self:getPositionY()
    --print(nodePos)
    --print(selfPos)
    --if (nodePos > selfPos) then
    --    self:merging(nodeA)
    --else
    --    --nodeA:merging(self)
    --end
end

---@public merging 开始融合
function CandyNode:merging(nodeA)
    print(1111)
    --self.physicsBody:removeFromWorld()
    nodeA.physicsBody:removeFromWorld()
    nodeA:runAction(
            cc.Sequence:create(
                    cc.MoveTo:create(0.5, cc.p(self:getPositionX(), self:getPositionY())),
                    cc.CallFunc:create(function()
                        print("移动over")
                        self:upgrade()
                        nodeA:score()
                    end)
            )
    )
end

function CandyNode:upgrade()
    print("开始升级")
    self.id = self.id + 1
    self:init(self.id)
end

function CandyNode:score()
    print("开始加分 且删除自己")
    -- 延时调用
    -- @params callback(function) 回调函数
    -- @params time(float) 延时时间(s)
    -- @return 定时器
    local delayDoSomething = function(callback, time)
        local handle
        handle = cc.Director:getInstance():getScheduler():scheduleScriptFunc(function()
            cc.Director:getInstance():getScheduler():unscheduleScriptEntry(handle)
            callback()
        end, time, false)

        return handle
    end
    delayDoSomething(handler(self, self.removeSelf), 0.2)
end

return CandyNode